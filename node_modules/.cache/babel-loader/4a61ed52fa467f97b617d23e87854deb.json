{"ast":null,"code":"var _jsxFileName = \"W:\\\\Digital House\\\\Front End 2\\\\Entregable\\\\entregable-frontend-3-junio22-main\\\\src\\\\components\\\\Item.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\"; // El componente Item no tiene componentes hijos.\n// ESTADO: Item debe tener un número para almacenar la cantidad de stock, la misma se la defina el padre a la hora de crearlo.\n// MÉTODOS: Item debe manejar el click de su boton para restar la cantidad en stock de sí mismo y a su vez poder aumentar el estado de su \"abuelo\" App.\n// PROPS: Item recibe todos los campos que muestra en pantalla: nombre, descripcion, stock y el métodos heredados para su uso.\n// Maqueta de Item:\n//    h3\n//    p\n//    h5 > span    (este span debe mostrar la cantidad si es mayor a 0 \"agotado\" si llega a 0)\n//    button       (este boton debe permitir comprar, pero si la cantidad es menor a 0 debe estar deshabilitado y decir \"Sin stock\")\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Agotado = () => /*#__PURE__*/_jsxDEV(\"span\", {\n  children: \"agotado\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 12,\n  columnNumber: 23\n}, this);\n\n_c = Agotado;\nexport default function Item(_ref) {\n  _s();\n\n  let {\n    producto,\n    stock,\n    sumarProd\n  } = _ref;\n  const [stockProd, setStockProd] = useState(stock);\n  const [agotado, setAgotado] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"producto\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Item, \"l/tPaRM7UtFWzk/842LKGWnxZoA=\");\n\n_c2 = Item;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Agotado\");\n$RefreshReg$(_c2, \"Item\");","map":{"version":3,"names":["useState","Agotado","Item","producto","stock","sumarProd","stockProd","setStockProd","agotado","setAgotado"],"sources":["W:/Digital House/Front End 2/Entregable/entregable-frontend-3-junio22-main/src/components/Item.js"],"sourcesContent":["import { useState } from \"react\";\r\n// El componente Item no tiene componentes hijos.\r\n// ESTADO: Item debe tener un número para almacenar la cantidad de stock, la misma se la defina el padre a la hora de crearlo.\r\n// MÉTODOS: Item debe manejar el click de su boton para restar la cantidad en stock de sí mismo y a su vez poder aumentar el estado de su \"abuelo\" App.\r\n// PROPS: Item recibe todos los campos que muestra en pantalla: nombre, descripcion, stock y el métodos heredados para su uso.\r\n// Maqueta de Item:\r\n//    h3\r\n//    p\r\n//    h5 > span    (este span debe mostrar la cantidad si es mayor a 0 \"agotado\" si llega a 0)\r\n//    button       (este boton debe permitir comprar, pero si la cantidad es menor a 0 debe estar deshabilitado y decir \"Sin stock\")\r\n\r\nconst Agotado = () => <span>agotado</span>;\r\n\r\nexport default function Item({producto,stock,sumarProd}) {\r\n  const [stockProd, setStockProd] = useState(stock);\r\n  const [agotado, setAgotado] = useState(false);\r\n\r\n  \r\n\r\n  return (\r\n    <div className='producto'>\r\n      {/* maquetar Item aquí */\r\n      \r\n      }\r\n  \r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,OAAO,GAAG,mBAAM;EAAA;AAAA;EAAA;EAAA;EAAA;AAAA,QAAtB;;KAAMA,O;AAEN,eAAe,SAASC,IAAT,OAA0C;EAAA;;EAAA,IAA5B;IAACC,QAAD;IAAUC,KAAV;IAAgBC;EAAhB,CAA4B;EACvD,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAACI,KAAD,CAA1C;EACA,MAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;EAIA,oBACE;IAAK,SAAS,EAAC;EAAf;IAAA;IAAA;IAAA;EAAA,QADF;AAQD;;GAduBE,I;;MAAAA,I"},"metadata":{},"sourceType":"module"}